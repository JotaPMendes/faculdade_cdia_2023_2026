import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from app.database.connection import obter_todas_transacoes, obter_transacoes_por_usuario
from app.utils.analysis import formatar_moeda, gerar_metricas_transacoes

def renderizar_dashboard_metricas(df_transacoes):
    """
    Renderiza o dashboard com m√©tricas gerais das transa√ß√µes.
    
    Args:
        df_transacoes (pandas.DataFrame): DataFrame com as transa√ß√µes
    """
    # Obter m√©tricas
    metricas = gerar_metricas_transacoes(df_transacoes)
    
    # Mostrar m√©tricas em colunas
    st.subheader("M√©tricas Gerais")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(label="Total de Transa√ß√µes", 
                  value=f"{metricas['total_transacoes']:,}".replace(",", "."))
    
    with col2:
        st.metric(label="Total de Usu√°rios", 
                  value=f"{metricas['total_usuarios']:,}".replace(",", "."))
    
    with col3:
        st.metric(label="Valor M√©dio (R$)", 
                  value=f"{metricas['valor_medio']:.2f}")
    
    with col4:
        st.metric(label="Maior Valor (R$)", 
                  value=f"{metricas['maior_valor']:.2f}")
    
    # Mostrar gr√°ficos de distribui√ß√£o
    st.subheader("Distribui√ß√£o das Transa√ß√µes")
    col1, col2 = st.columns(2)
    
    # S√≥ gera gr√°ficos se houver dados
    if len(df_transacoes) > 0:
        with col1:
            # Gr√°fico de tipo de transa√ß√£o
            tipos = pd.DataFrame({
                'Tipo': list(metricas['tipos_transacao'].keys()),
                'Quantidade': list(metricas['tipos_transacao'].values())
            })
            fig_tipos = px.pie(tipos, values='Quantidade', names='Tipo', 
                              title='Transa√ß√µes por Tipo',
                              color_discrete_sequence=px.colors.qualitative.Set3)
            st.plotly_chart(fig_tipos, use_container_width=True)
            
        with col2:
            # Gr√°fico de status de transa√ß√£o
            status = pd.DataFrame({
                'Status': list(metricas['status_transacao'].keys()),
                'Quantidade': list(metricas['status_transacao'].values())
            })
            fig_status = px.pie(status, values='Quantidade', names='Status', 
                               title='Transa√ß√µes por Status',
                               color_discrete_sequence=px.colors.qualitative.Pastel)
            st.plotly_chart(fig_status, use_container_width=True)
    else:
        st.info("N√£o h√° dados suficientes para gerar gr√°ficos")

def renderizar_visualizacao_dados():
    """
    Renderiza a visualiza√ß√£o de dados e dashboard.
    """
    st.markdown("<h3>Dashboard & Visualiza√ß√£o de Dados</h3>", unsafe_allow_html=True)
    
    # Op√ß√µes de filtro e visualiza√ß√£o
    tab1, tab2 = st.tabs(["üìä Dashboard", "üìã Tabelas de Dados"])
    
    # Tab 1: Dashboard
    with tab1:
        # Pegar dados atualizados (limitado a 100 para performance)
        df_transacoes = obter_todas_transacoes(100)
        renderizar_dashboard_metricas(df_transacoes)
        
        # Mostrar gr√°fico de s√©rie temporal se houver dados
        if len(df_transacoes) > 0:
            st.subheader("S√©rie Temporal de Transa√ß√µes")
            
            # Converter data para datetime e agrupar
            df_transacoes['date'] = pd.to_datetime(df_transacoes['date'])
            df_agrupado = df_transacoes.groupby(pd.Grouper(key='date', freq='D')).size().reset_index(name='count')
            
            # Gr√°fico de linha
            fig = px.line(df_agrupado, x='date', y='count', 
                         title='Volume de Transa√ß√µes por Dia',
                         labels={'date': 'Data', 'count': 'Quantidade'})
            st.plotly_chart(fig, use_container_width=True)
    
    # Tab 2: Dados em tabela
    with tab2:
        # Filtro por usu√°rio
        st.subheader("Visualiza√ß√£o de Transa√ß√µes")
        opcao = st.radio("Visualizar:", options=["Todas as Transa√ß√µes", "Filtrar por Usu√°rio"])
        
        if opcao == "Todas as Transa√ß√µes":
            # Limitar para n√£o sobrecarregar a UI
            limite = st.slider("Limite de registros:", min_value=10, max_value=200, value=50)
            df = obter_todas_transacoes(limite)
            st.dataframe(df, use_container_width=True)
        else:
            user_id = st.number_input("ID do usu√°rio:", min_value=1, step=1, value=1)
            limite = st.slider("Limite de registros:", min_value=10, max_value=100, value=30)
            df = obter_transacoes_por_usuario(user_id, limite)
            
            if len(df) > 0:
                st.dataframe(df, use_container_width=True)
            else:
                st.warning(f"Nenhuma transa√ß√£o encontrada para o usu√°rio {user_id}")

def renderizar_grafico_anomalias(user_id=None):
    """
    Renderiza um gr√°fico de anomalias para um usu√°rio espec√≠fico ou todos os usu√°rios.
    
    Args:
        user_id (int, optional): ID do usu√°rio ou None para todos. Defaults to None.
    """
    st.markdown("<h3>An√°lise de Anomalias</h3>", unsafe_allow_html=True)
    
    # Obter dados
    if user_id:
        df = obter_transacoes_por_usuario(user_id)
        titulo = f"Padr√£o de Transa√ß√µes do Usu√°rio {user_id}"
    else:
        df = obter_todas_transacoes(100)  # Limitar para performance
        titulo = "Padr√£o de Transa√ß√µes (Todos os Usu√°rios)"
    
    # Verificar se h√° dados suficientes
    if len(df) < 3:
        st.info("N√£o h√° dados suficientes para an√°lise de anomalias")
        return
    
    # Calcular estat√≠sticas globais
    media_global = df['amount'].mean()
    desvio_global = df['amount'].std()
    
    # Criar linha de corte para anomalias (2 desvios padr√£o)
    limiar_superior = media_global + (2 * desvio_global)
    
    # Classificar transa√ß√µes como normais ou an√¥malas
    df['anomalia'] = df['amount'] > limiar_superior
    
    # Gr√°fico de dispers√£o
    fig = px.scatter(
        df, 
        x='id', 
        y='amount',
        color='anomalia',
        color_discrete_map={True: 'red', False: 'blue'},
        title=titulo,
        labels={'id': 'ID da Transa√ß√£o', 'amount': 'Valor (R$)', 'anomalia': 'Anomalia'},
        hover_data=['user_id', 'date', 'type', 'status']
    )
    
    # Adicionar linha de m√©dia e limiar
    fig.add_hline(y=media_global, line_dash="dash", line_color="green", annotation_text="M√©dia")
    fig.add_hline(y=limiar_superior, line_dash="dash", line_color="red", annotation_text="Limiar de Anomalia")
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar estat√≠sticas
    st.caption(f"M√©dia: R$ {media_global:.2f} | Desvio Padr√£o: R$ {desvio_global:.2f} | Limiar: R$ {limiar_superior:.2f}")
    
    # Mostrar transa√ß√µes an√¥malas em tabela
    anomalias = df[df['anomalia']]
    if len(anomalias) > 0:
        st.subheader(f"Transa√ß√µes An√¥malas ({len(anomalias)})")
        st.dataframe(anomalias)
    else:
        st.success("Nenhuma transa√ß√£o an√¥mala detectada nos dados analisados")