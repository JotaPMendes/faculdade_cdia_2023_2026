# -*- coding: utf-8 -*-
"""streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g3F50gRx-n5_kLtt_9doXkH4VP3i6E7e
"""

import streamlit as st
import cv2
import numpy as np
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from src.models.fine_tuning import fine_tune_model

# Configurações do projeto
MODEL_PATH = os.path.join('..', 'models', 'modelo_treinado.h5')
FINE_TUNE_DATA_DIR = os.path.join('..', 'data', 'data_fine_tuning')
IMAGE_SIZE = (128, 128)

# Carregar modelo
@st.cache(allow_output_mutation=True)
def load_face_model():
    return load_model(MODEL_PATH)

model = load_face_model()

def preprocess_image(image):
    image = cv2.resize(image, IMAGE_SIZE)
    image = image.astype("float") / 255.0
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    return image

def save_face_image(person_name, img):
    person_dir = os.path.join(FINE_TUNE_DATA_DIR, person_name)
    os.makedirs(person_dir, exist_ok=True)
    count = len(os.listdir(person_dir))
    img_path = os.path.join(person_dir, f"{count+1}.jpg")
    cv2.imwrite(img_path, img)
    return img_path

st.title("Reconhecimento Facial e Cadastro de Novas Pessoas")

menu = st.sidebar.selectbox("Menu", ["Reconhecimento", "Cadastrar Pessoa", "Fine Tuning"])

if menu == "Cadastrar Pessoa":
    st.header("Cadastrar nova pessoa")
    person_name = st.text_input("Digite o nome da pessoa (sem espaços):")
    picture_taken = False

    if person_name:
        run = st.button("Capturar Foto da Webcam")
        FRAME_WINDOW = st.image([])

        cap = cv2.VideoCapture(0)

        while run:
            ret, frame = cap.read()
            if not ret:
                st.error("Não foi possível acessar a webcam.")
                break

            frame = cv2.flip(frame, 1)
            FRAME_WINDOW.image(frame)

            if st.button("Salvar Foto"):
                save_face_image(person_name, frame)
                st.success(f"Foto salva para {person_name}")
                picture_taken = True
                break

        cap.release()
        cv2.destroyAllWindows()

elif menu == "Fine Tuning":
    st.header("Treinar modelo com novas fotos (Fine Tuning)")
    epochs = st.number_input("Número de épocas", min_value=1, max_value=50, value=5)
    learning_rate = st.number_input("Learning rate", min_value=0.00001, max_value=0.01, value=0.0001, format="%.5f")

    if st.button("Iniciar Fine Tuning"):
        with st.spinner("Treinando modelo... Isso pode levar alguns minutos"):
            fine_tune_model(MODEL_PATH, FINE_TUNE_DATA_DIR, image_size=IMAGE_SIZE,
                            batch_size=32, learning_rate=learning_rate, epochs=epochs)
        st.success("Fine tuning concluído e modelo salvo.")

elif menu == "Reconhecimento":
    st.header("Reconhecimento Facial em tempo real")
    cap = cv2.VideoCapture(0)
    FRAME_WINDOW = st.image([])

    while True:
        ret, frame = cap.read()
        if not ret:
            st.error("Não foi possível acessar a webcam.")
            break

        frame = cv2.flip(frame, 1)
        input_img = cv2.resize(frame, IMAGE_SIZE)
        input_img = input_img.astype("float") / 255.0
        input_img = img_to_array(input_img)
        input_img = np.expand_dims(input_img, axis=0)

        preds = model.predict(input_img)
        class_idx = np.argmax(preds)
        confidence = preds[0][class_idx]

        classes = sorted(os.listdir(FINE_TUNE_DATA_DIR))
        if confidence > 0.5:
            label = classes[class_idx]
        else:
            label = "Desconhecido"

        # Mostrar resultado na imagem
        cv2.putText(frame, f"{label}: {confidence:.2f}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2)

        FRAME_WINDOW.image(frame)

        if st.button("Parar"):
            break

    cap.release()
    cv2.destroyAllWindows()